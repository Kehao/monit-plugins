#!/usr/bin/env lua

-- check_mem_free

dofile("plugin.lua")

-- do check
function check() 
  local output = os.cmd("free o")
  local headers = {"total", "used", "free", "shared", "buffers", "cached"}
  local metrics = {string.match(output, "Mem:%s+(%d+)%s+(%d+)%s+(%d+)%s+(%d+)%s+(%d+)%s+(%d+)")}
  if #metrics < 6 then 
    print("UNKNOWN - no memory data\r\n") 
    return  
  end
  local metrics = table.map(metrics, function(v) return tonumber(v) end)
  local memtab = table.zip(headers, metrics)
  memtab["usage"] = string.format("%.2f%", (memtab["used"] * 100 / memtab["total"]))
  memtab["appused"] = memtab["used"] - memtab["buffers"] - memtab["cached"]
  memtab["appusage"] = string.format("%.2f%%", (memtab["appused"] * 100/ memtab["total"]))
  print(string.format("OK - memory usage = %s\r\n", memtab["usage"]))
  for k,v in pairs(memtab) do
    print(string.format("metric: %s=%s", k, v))
  end
end

-- usage
function usage() 
  print("Usage: check_mem_free")
end

-- parse arguments
ok, err = pcall(check)
if not ok then
  print("UNKNOWN - plugin internal error\r\n")
  print(err)
end
