#!/usr/bin/env lua

-- check mysql locks
-- author: ery.lee@gmail.com from monit.cn

require("plugin")

-- do check
function check(opts) 
  require "luasql.mysql"
  env = assert (luasql.mysql())
  con = assert (env:connect("mysql", opts["username"], opts["password"], opts["host"], tonumber(opts["port"])))
  -- retrieve status
  sql_status = [[show status where Variable_name in 
                 ('Table_locks_immediate', 'Table_locks_waited')]]
  cur = assert (con:execute(sql_status))
  metrics = {}
  row = cur:fetch ({}, "a")
  while row do
    metric = string.gsub(string.lower(row.Variable_name), "^%w+_+", "")
    metrics[metric] = row.Value
    row = cur:fetch(row, "a")
  end
  -- print result
  print("OK - locks_waited = "..metrics["locks_waited"])
  print("count-metrics: locks_immediate\n") 
  for k,v in pairs(metrics) do
    print(string.format("metric:%s: %s", k, v))
  end
  -- close everything
  cur:close()
  con:close()
  env:close()
end

-- usage
function usage() 
  print("Usage: check_mysql_locks --host=Host --username=User --password=Password --port=Port")
end

-- parse arguments
opts = getopt(arg, {"host", "password", "username", "port"})
if not opts["port"] then opts["port"] = "3306" end
for i, o in ipairs({"host", "password", "username"}) do
  if not opts[o] then
    print(string.format("UNKNOWN - miss argument = '%s'\n", o))
    usage()
    return
  end
end

status, err = pcall(check, opts) 
if not status then
  print("UNKNOWN - plugin internal error\n")
  print(err)
end

