#!/usr/bin/env lua

-- check mysql connections 
-- author: ery.lee@gmail.com from monit.cn

require("plugin")

-- do check
function check(opts) 
  require "luasql.mysql"
  env = assert (luasql.mysql())
  con = assert (env:connect("mysql", opts["username"], opts["password"], opts["host"], tonumber(opts["port"])))
  -- retrieve status
  sql_variables = [[show global variables where Variable_name in 
                    ('query_cache_size', 'query_cache_limit')]]
  cur = assert (con:execute(sql_variables))
  variables = {}
  row = cur:fetch ({}, "a")
  while row do
    variables[row.Variable_name] = row.Value
    row = cur:fetch (row, "a")
  end
  sql_status = [[show global status like 'Qcache_%']]
  cur = assert (con:execute(sql_status))
  metrics = {}
  row = cur:fetch ({}, "a")
  while row do
    metrics[string.lower(row.Variable_name)] = row.Value
    row = cur:fetch(row, "a")
  end
  hits_rate = 0
  if not (metrics["qcache_hits"] == "0" and metrics["qcache_inserts"] == "0") then
    hits_rate = tonumber(metrics["qcache_hits"])/(tonumber(metrics["qcache_hits"]) + tonumber(metrics["qcache_inserts"]))
  end
  metrics["qchace_hits_rate"] = hits_rate
  -- print result
  print(string.format("OK - qcache_hits_rate = %.2f\r\n", hits_rate))
  for k, v in pairs(variables) do
    print(string.format("attr:variable %s=%s", k, v))
  end
  for k,v in pairs(metrics) do
    print(string.format("metric: %s=%s", k, v))
  end
  -- close everything
  cur:close()
  con:close()
  env:close()
end

-- usage
function usage() 
  print("Usage: check_mysql_qcache --host=Host --username=User --password=Password --port=Port")
end

-- parse arguments
opts = getopt(arg, {"host", "password", "username", "port"})
if not opts["port"] then opts["port"] = "3306" end
for i, o in ipairs({"host", "password", "username"}) do
  if not opts[o] then
    print(string.format("UNKNOWN - miss argument = '%s'\r\n", o))
    usage()
    return
  end
end

status, err = pcall(check, opts) 
if not status then
  print("UNKNOWN - plugin internal error\r\n")
  print(err)
end

